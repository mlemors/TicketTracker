<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="# Build- und temporäre Dateien&#10;bin/&#10;obj/&#10;.idea/&#10;*.user&#10;*.suo&#10;*.userosscache&#10;*.sln.docstates&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/TicketTracker/ViewModels/TimerViewModel.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/TicketTracker/ViewModels/TimerViewModel.cs" />
              <option name="originalContent" value="using System.Windows.Input;&#10;using TicketTracker.Commands;&#10;using TicketTracker.Models;&#10;using TicketTracker.Services;&#10;&#10;namespace TicketTracker.ViewModels;&#10;&#10;public class TimerViewModel : BaseViewModel&#10;{&#10;    private readonly Action&lt;TimerViewModel&gt;? _onRemove;&#10;    private readonly TimerModel _timer;&#10;    private readonly TimerService _timerService;&#10;    private string _displayTime = &quot;00:00:00.0&quot;;&#10;    private bool _isSelected;&#10;&#10;    public TimerViewModel(TimerModel timer, TimerService timerService, Action&lt;TimerViewModel&gt;? onRemove = null)&#10;    {&#10;        _timer = timer;&#10;        _timerService = timerService;&#10;        _onRemove = onRemove;&#10;&#10;        StartCommand = new RelayCommand(StartCommand_Execute, () =&gt; !_timer.IsRunning);&#10;        PauseCommand = new RelayCommand(Pause, () =&gt; _timer.IsRunning);&#10;        ResetCommand = new RelayCommand(Reset);&#10;        RemoveCommand = new RelayCommand(Remove);&#10;&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    public string Id =&gt; _timer.Id;&#10;    public string Name =&gt; _timer.Name;&#10;    public bool IsRunning =&gt; _timer.IsRunning;&#10;    public TimeSpan ElapsedTime =&gt; _timer.GetCurrentElapsedTime();&#10;    public DateTime? StartTime =&gt; _timer.StartTime;&#10;    public DateTime? LastStartTime =&gt; _timer.LastStartTime;&#10;&#10;    public string DisplayTime&#10;    {&#10;        get =&gt; _displayTime;&#10;        private set =&gt; SetProperty(ref _displayTime, value);&#10;    }&#10;&#10;    public bool IsSelected&#10;    {&#10;        get =&gt; _isSelected;&#10;        set =&gt; SetProperty(ref _isSelected, value);&#10;    }&#10;&#10;    public ICommand StartCommand { get; }&#10;    public ICommand PauseCommand { get; }&#10;    public ICommand ResetCommand { get; }&#10;    public ICommand RemoveCommand { get; }&#10;&#10;    public void UpdateDisplayTime()&#10;    {&#10;        var elapsed = _timer.GetCurrentElapsedTime();&#10;        DisplayTime = FormatTime(elapsed);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    public void Start()&#10;    {&#10;        _timerService.StartTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    public void SetElapsedTime(TimeSpan elapsedTime)&#10;    {&#10;        _timer.ElapsedTime = elapsedTime;&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    public void SetStartTime(DateTime? startTime)&#10;    {&#10;        _timer.StartTime = startTime;&#10;        OnPropertyChanged(nameof(StartTime));&#10;    }&#10;&#10;    public void SetLastStartTime(DateTime? lastStartTime)&#10;    {&#10;        _timer.LastStartTime = lastStartTime;&#10;        OnPropertyChanged(nameof(LastStartTime));&#10;    }&#10;&#10;    private void StartCommand_Execute()&#10;    {&#10;        Start();&#10;    }&#10;&#10;    private void Pause()&#10;    {&#10;        _timerService.PauseTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    private void Reset()&#10;    {&#10;        _timerService.ResetTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    private void Remove()&#10;    {&#10;        _timerService.RemoveTimer(_timer);&#10;        _onRemove?.Invoke(this);&#10;    }&#10;&#10;    private static string FormatTime(TimeSpan timeSpan)&#10;    {&#10;        return $&quot;{(int)timeSpan.TotalHours:D2}:{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}&quot;;&#10;    }&#10;}" />
              <option name="updatedContent" value="using System.Windows.Input;&#10;using TicketTracker.Commands;&#10;using TicketTracker.Models;&#10;using TicketTracker.Services;&#10;&#10;namespace TicketTracker.ViewModels;&#10;&#10;public class TimerViewModel : BaseViewModel&#10;{&#10;    private readonly Action&lt;TimerViewModel&gt;? _onRemove;&#10;    private readonly TimerModel _timer;&#10;    private readonly TimerService _timerService;&#10;    private string _displayTime = &quot;00:00:00.0&quot;;&#10;    private bool _isSelected;&#10;&#10;    public TimerViewModel(TimerModel timer, TimerService timerService, Action&lt;TimerViewModel&gt;? onRemove = null)&#10;    {&#10;        _timer = timer;&#10;        _timerService = timerService;&#10;        _onRemove = onRemove;&#10;&#10;        StartCommand = new RelayCommand(StartCommand_Execute, () =&gt; !_timer.IsRunning);&#10;        PauseCommand = new RelayCommand(Pause, () =&gt; _timer.IsRunning);&#10;        ResetCommand = new RelayCommand(Reset);&#10;        RemoveCommand = new RelayCommand(Remove);&#10;        OpenTicketCommand = new RelayCommand(OpenTicketLink, () =&gt; !string.IsNullOrWhiteSpace(Name));&#10;&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    public string Id =&gt; _timer.Id;&#10;    public string Name =&gt; _timer.Name;&#10;    public bool IsRunning =&gt; _timer.IsRunning;&#10;    public TimeSpan ElapsedTime =&gt; _timer.GetCurrentElapsedTime();&#10;    public DateTime? StartTime =&gt; _timer.StartTime;&#10;    public DateTime? LastStartTime =&gt; _timer.LastStartTime;&#10;&#10;    public string DisplayTime&#10;    {&#10;        get =&gt; _displayTime;&#10;        private set =&gt; SetProperty(ref _displayTime, value);&#10;    }&#10;&#10;    public bool IsSelected&#10;    {&#10;        get =&gt; _isSelected;&#10;        set =&gt; SetProperty(ref _isSelected, value);&#10;    }&#10;&#10;    public ICommand StartCommand { get; }&#10;    public ICommand PauseCommand { get; }&#10;    public ICommand ResetCommand { get; }&#10;    public ICommand RemoveCommand { get; }&#10;    public ICommand OpenTicketCommand { get; }&#10;&#10;    public void UpdateDisplayTime()&#10;    {&#10;        var elapsed = _timer.GetCurrentElapsedTime();&#10;        DisplayTime = FormatTime(elapsed);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    public void Start()&#10;    {&#10;        _timerService.StartTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    public void SetElapsedTime(TimeSpan elapsedTime)&#10;    {&#10;        _timer.ElapsedTime = elapsedTime;&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    public void SetStartTime(DateTime? startTime)&#10;    {&#10;        _timer.StartTime = startTime;&#10;        OnPropertyChanged(nameof(StartTime));&#10;    }&#10;&#10;    public void SetLastStartTime(DateTime? lastStartTime)&#10;    {&#10;        _timer.LastStartTime = lastStartTime;&#10;        OnPropertyChanged(nameof(LastStartTime));&#10;    }&#10;&#10;    private void StartCommand_Execute()&#10;    {&#10;        Start();&#10;    }&#10;&#10;    private void Pause()&#10;    {&#10;        _timerService.PauseTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    private void Reset()&#10;    {&#10;        _timerService.ResetTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    private void Remove()&#10;    {&#10;        _timerService.RemoveTimer(_timer);&#10;        _onRemove?.Invoke(this);&#10;    }&#10;&#10;    private void OpenTicketLink()&#10;    {&#10;        if (!string.IsNullOrWhiteSpace(Name))&#10;        {&#10;            var url = $&quot;https://jtl-software.atlassian.net/browse/{Name}&quot;;&#10;            try&#10;            {&#10;                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo&#10;                {&#10;                    FileName = url,&#10;                    UseShellExecute = true&#10;                });&#10;            }&#10;            catch { /* Fehlerbehandlung falls gewünscht */ }&#10;        }&#10;    }&#10;&#10;    private static string FormatTime(TimeSpan timeSpan)&#10;    {&#10;        return $&quot;{(int)timeSpan.TotalHours:D2}:{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/TicketTracker/Views/StopwatchView.xaml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/TicketTracker/Views/StopwatchView.xaml" />
              <option name="originalContent" value="&lt;UserControl x:Class=&quot;TicketTracker.Views.StopwatchView&quot;&#10;             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&#10;             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&#10;             Background=&quot;{DynamicResource BackgroundBrush}&quot;&gt;&#10;&#10;    &lt;!-- Hauptbereich mit Timer-Anzeige --&gt;&#10;    &lt;Grid Margin=&quot;40&quot; x:Name=&quot;MainContentGrid&quot;&gt;&#10;        &lt;Grid.RenderTransform&gt;&#10;            &lt;TranslateTransform x:Name=&quot;ContentTransform&quot; X=&quot;0&quot; Y=&quot;0&quot; /&gt;&#10;        &lt;/Grid.RenderTransform&gt;&#10;        &lt;Grid.RowDefinitions&gt;&#10;            &lt;RowDefinition Height=&quot;Auto&quot; /&gt;&#10;            &lt;RowDefinition Height=&quot;*&quot; /&gt;&#10;            &lt;RowDefinition Height=&quot;60&quot; /&gt;&#10;        &lt;/Grid.RowDefinitions&gt;&#10;&#10;        &lt;!-- Timer Name and Start Time --&gt;&#10;        &lt;StackPanel Grid.Row=&quot;0&quot; HorizontalAlignment=&quot;Center&quot; Margin=&quot;0,40,0,30&quot;&gt;&#10;            &lt;!-- Timer Name (jetzt oben und größer) --&gt;&#10;            &lt;TextBlock x:Name=&quot;TimerName&quot;&#10;                       Text=&quot;Wählen Sie einen Timer aus&quot;&#10;                       FontSize=&quot;32&quot;&#10;                       FontWeight=&quot;SemiBold&quot;&#10;                       Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                       HorizontalAlignment=&quot;Center&quot; /&gt;&#10;&#10;            &lt;!-- Start Date/Time (klein und grau) --&gt;&#10;            &lt;TextBlock x:Name=&quot;StartDateTime&quot;&#10;                       Text=&quot;Noch nicht gestartet&quot;&#10;                       FontSize=&quot;12&quot;&#10;                       Foreground=&quot;Gray&quot;&#10;                       HorizontalAlignment=&quot;Center&quot;&#10;                       Margin=&quot;0,5,0,0&quot;&#10;                       Visibility=&quot;Visible&quot; /&gt;&#10;        &lt;/StackPanel&gt;&#10;&#10;        &lt;!-- Timer-Anzeige (jetzt in der Mitte und kleiner) --&gt;&#10;        &lt;Viewbox Grid.Row=&quot;1&quot; Stretch=&quot;Uniform&quot; MaxHeight=&quot;150&quot;&gt;&#10;            &lt;TextBlock x:Name=&quot;TimerDisplay&quot;&#10;                       Text=&quot;00:00:00&quot;&#10;                       FontFamily=&quot;Consolas&quot;&#10;                       FontWeight=&quot;Light&quot;&#10;                       FontSize=&quot;60&quot;&#10;                       Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                       HorizontalAlignment=&quot;Center&quot;&#10;                       VerticalAlignment=&quot;Center&quot; /&gt;&#10;        &lt;/Viewbox&gt;&#10;&#10;        &lt;!-- Steuerungsbuttons --&gt;&#10;        &lt;StackPanel Grid.Row=&quot;2&quot;&#10;                    Orientation=&quot;Horizontal&quot;&#10;                    HorizontalAlignment=&quot;Center&quot;&gt;&#10;            &lt;Button x:Name=&quot;StartPauseButton&quot;&#10;                    Width=&quot;100&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot; FontWeight=&quot;SemiBold&quot;&#10;                    Background=&quot;{DynamicResource AccentBrush}&quot;&#10;                    Foreground=&quot;White&quot;&#10;                    BorderThickness=&quot;0&quot;&#10;                    Margin=&quot;0,0,15,0&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                                &lt;Setter Property=&quot;TextElement.Foreground&quot; Value=&quot;{DynamicResource PrimaryTextBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock x:Name=&quot;StartPauseIcon&quot;&#10;                               Text=&quot;▶️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock x:Name=&quot;StartPauseText&quot;&#10;                               Text=&quot;Start&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;&#10;            &lt;Button x:Name=&quot;ResetButton&quot;&#10;                    Width=&quot;80&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot;&#10;                    Background=&quot;{DynamicResource SurfaceBrush}&quot;&#10;                    Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                    BorderThickness=&quot;1&quot;&#10;                    BorderBrush=&quot;{DynamicResource BorderBrush}&quot;&#10;                    Margin=&quot;0,0,15,0&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock Text=&quot;⏹️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock Text=&quot;Reset&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;&#10;            &lt;Button x:Name=&quot;DeleteButton&quot;&#10;                    Width=&quot;80&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot;&#10;                    Background=&quot;{DynamicResource SurfaceBrush}&quot;&#10;                    Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                    BorderThickness=&quot;1&quot;&#10;                    BorderBrush=&quot;{DynamicResource BorderBrush}&quot;&#10;                    Click=&quot;DeleteButton_Click&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock Text=&quot;️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock Text=&quot;Löschen&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;        &lt;/StackPanel&gt;&#10;    &lt;/Grid&gt;&#10;&lt;/UserControl&gt;" />
              <option name="updatedContent" value="&lt;UserControl x:Class=&quot;TicketTracker.Views.StopwatchView&quot;&#10;             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&#10;             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&#10;             Background=&quot;{DynamicResource BackgroundBrush}&quot;&gt;&#10;&#10;    &lt;!-- Hauptbereich mit Timer-Anzeige --&gt;&#10;    &lt;Grid Margin=&quot;40&quot; x:Name=&quot;MainContentGrid&quot;&gt;&#10;        &lt;Grid.RenderTransform&gt;&#10;            &lt;TranslateTransform x:Name=&quot;ContentTransform&quot; X=&quot;0&quot; Y=&quot;0&quot; /&gt;&#10;        &lt;/Grid.RenderTransform&gt;&#10;        &lt;Grid.RowDefinitions&gt;&#10;            &lt;RowDefinition Height=&quot;Auto&quot; /&gt;&#10;            &lt;RowDefinition Height=&quot;*&quot; /&gt;&#10;            &lt;RowDefinition Height=&quot;60&quot; /&gt;&#10;        &lt;/Grid.RowDefinitions&gt;&#10;&#10;        &lt;!-- Timer Name and Start Time --&gt;&#10;        &lt;StackPanel Grid.Row=&quot;0&quot; HorizontalAlignment=&quot;Center&quot; Margin=&quot;0,40,0,30&quot;&gt;&#10;            &lt;!-- Timer Name als klickbarer Link --&gt;&#10;            &lt;TextBlock FontSize=&quot;32&quot;&#10;                       FontWeight=&quot;SemiBold&quot;&#10;                       Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                       HorizontalAlignment=&quot;Center&quot;&#10;                       DataContext=&quot;{Binding SelectedTimer}&quot;&gt;&#10;                &lt;Hyperlink Command=&quot;{Binding OpenTicketCommand}&quot; Foreground=&quot;White&quot;&gt;&#10;                    &lt;Run Text=&quot;{Binding Name, Mode=OneWay}&quot; /&gt;&#10;                &lt;/Hyperlink&gt;&#10;            &lt;/TextBlock&gt;&#10;&#10;            &lt;!-- Start Date/Time (klein und grau) --&gt;&#10;            &lt;TextBlock x:Name=&quot;StartDateTime&quot;&#10;                       Text=&quot;Noch nicht gestartet&quot;&#10;                       FontSize=&quot;12&quot;&#10;                       Foreground=&quot;Gray&quot;&#10;                       HorizontalAlignment=&quot;Center&quot;&#10;                       Margin=&quot;0,5,0,0&quot;&#10;                       Visibility=&quot;Visible&quot; /&gt;&#10;        &lt;/StackPanel&gt;&#10;&#10;        &lt;!-- Timer-Anzeige (jetzt in der Mitte und kleiner) --&gt;&#10;        &lt;Viewbox Grid.Row=&quot;1&quot; Stretch=&quot;Uniform&quot; MaxHeight=&quot;150&quot;&gt;&#10;            &lt;TextBlock x:Name=&quot;TimerDisplay&quot;&#10;                       Text=&quot;00:00:00&quot;&#10;                       FontFamily=&quot;Consolas&quot;&#10;                       FontWeight=&quot;Light&quot;&#10;                       FontSize=&quot;60&quot;&#10;                       Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                       HorizontalAlignment=&quot;Center&quot;&#10;                       VerticalAlignment=&quot;Center&quot; /&gt;&#10;        &lt;/Viewbox&gt;&#10;&#10;        &lt;!-- Steuerungsbuttons --&gt;&#10;        &lt;StackPanel Grid.Row=&quot;2&quot;&#10;                    Orientation=&quot;Horizontal&quot;&#10;                    HorizontalAlignment=&quot;Center&quot;&gt;&#10;            &lt;Button x:Name=&quot;StartPauseButton&quot;&#10;                    Width=&quot;100&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot; FontWeight=&quot;SemiBold&quot;&#10;                    Background=&quot;{DynamicResource AccentBrush}&quot;&#10;                    Foreground=&quot;White&quot;&#10;                    BorderThickness=&quot;0&quot;&#10;                    Margin=&quot;0,0,15,0&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                                &lt;Setter Property=&quot;TextElement.Foreground&quot; Value=&quot;{DynamicResource PrimaryTextBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock x:Name=&quot;StartPauseIcon&quot;&#10;                               Text=&quot;▶️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock x:Name=&quot;StartPauseText&quot;&#10;                               Text=&quot;Start&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;&#10;            &lt;Button x:Name=&quot;ResetButton&quot;&#10;                    Width=&quot;80&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot;&#10;                    Background=&quot;{DynamicResource SurfaceBrush}&quot;&#10;                    Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                    BorderThickness=&quot;1&quot;&#10;                    BorderBrush=&quot;{DynamicResource BorderBrush}&quot;&#10;                    Margin=&quot;0,0,15,0&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock Text=&quot;⏹️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock Text=&quot;Reset&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;&#10;            &lt;Button x:Name=&quot;DeleteButton&quot;&#10;                    Width=&quot;80&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot;&#10;                    Background=&quot;{DynamicResource SurfaceBrush}&quot;&#10;                    Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                    BorderThickness=&quot;1&quot;&#10;                    BorderBrush=&quot;{DynamicResource BorderBrush}&quot;&#10;                    Click=&quot;DeleteButton_Click&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock Text=&quot;️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock Text=&quot;Löschen&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;        &lt;/StackPanel&gt;&#10;    &lt;/Grid&gt;&#10;&lt;/UserControl&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/TicketTracker/Views/StopwatchView.xaml.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/TicketTracker/Views/StopwatchView.xaml.cs" />
              <option name="originalContent" value="using System.Windows;&#10;using System.Windows.Controls;&#10;using System.Windows.Controls.Primitives;&#10;using System.Windows.Data;&#10;using System.Windows.Media;&#10;using System.Windows.Media.Animation;&#10;using TicketTracker.ViewModels;&#10;&#10;namespace TicketTracker.Views;&#10;&#10;public partial class StopwatchView : UserControl&#10;{&#10;    private string? _previousTimerName;&#10;    private MainWindowViewModel? _viewModel;&#10;&#10;    public StopwatchView()&#10;    {&#10;        InitializeComponent();&#10;    }&#10;&#10;    public void SetViewModel(MainWindowViewModel viewModel)&#10;    {&#10;        _viewModel = viewModel;&#10;        DataContext = viewModel;&#10;&#10;        // Initialize _previousTimerName with the empty state&#10;        _previousTimerName = &quot;Wählen Sie einen Timer aus&quot;;&#10;&#10;        // Timer Display und Name binden&#10;        TimerDisplay.SetBinding(TextBlock.TextProperty,&#10;            new Binding(&quot;MainTimerDisplay&quot;));&#10;        TimerName.SetBinding(TextBlock.TextProperty,&#10;            new Binding(&quot;MainTimerName&quot;));&#10;&#10;        // Update start time display when timer changes&#10;        UpdateStartTimeDisplay();&#10;&#10;        // Button Commands binden&#10;        StartPauseButton.SetBinding(Button.CommandProperty,&#10;            new Binding(&quot;StartPauseCommand&quot;));&#10;        ResetButton.SetBinding(Button.CommandProperty,&#10;            new Binding(&quot;ResetCommand&quot;));&#10;&#10;        // Setup Delete button visibility&#10;        UpdateDeleteButtonVisibility();&#10;&#10;        // Button text updates and timer selection animation&#10;        viewModel.PropertyChanged += (s, e) =&gt;&#10;        {&#10;            if (e.PropertyName == nameof(viewModel.StartPauseButtonText))&#10;            {&#10;                UpdateStartPauseButton(viewModel.StartPauseButtonText);&#10;                UpdateStartTimeDisplay();&#10;            }&#10;            else if (e.PropertyName == nameof(viewModel.MainTimerName))&#10;            {&#10;                AnimateTimerChange(viewModel.MainTimerName);&#10;                UpdateDeleteButtonVisibility();&#10;                UpdateStartTimeDisplay();&#10;            }&#10;        };&#10;&#10;        UpdateStartPauseButton(viewModel.StartPauseButtonText);&#10;        _previousTimerName = viewModel.MainTimerName;&#10;    }&#10;&#10;&#10;    private void UpdateStartPauseButton(string text)&#10;    {&#10;        if (text == &quot;Start&quot;)&#10;        {&#10;            StartPauseIcon.Text = &quot;▶️&quot;;&#10;            StartPauseText.Text = &quot;Start&quot;;&#10;        }&#10;        else&#10;        {&#10;            StartPauseIcon.Text = &quot;⏸️&quot;;&#10;            StartPauseText.Text = &quot;Pause&quot;;&#10;        }&#10;    }&#10;&#10;    private void AnimateTimerChange(string newTimerName)&#10;    {&#10;        // Skip animation for initial load or when going to empty state&#10;        if (_previousTimerName == null || _previousTimerName == newTimerName ||&#10;            newTimerName == &quot;Wählen Sie einen Timer aus&quot;)&#10;        {&#10;            _previousTimerName = newTimerName;&#10;            return;&#10;        }&#10;&#10;        // When switching FROM empty state to first timer, use smooth fade-in like settings page&#10;        if (_previousTimerName == &quot;Wählen Sie einen Timer aus&quot;)&#10;        {&#10;            _previousTimerName = newTimerName;&#10;&#10;            // Smooth fade-in animation like settings page&#10;            var fadeInAnimation = new DoubleAnimation&#10;            {&#10;                From = 0.0,&#10;                To = 1.0,&#10;                Duration = TimeSpan.FromMilliseconds(150),&#10;                EasingFunction = new QuadraticEase { EasingMode = EasingMode.EaseOut }&#10;            };&#10;&#10;            BeginAnimation(OpacityProperty, fadeInAnimation);&#10;            return;&#10;        }&#10;&#10;        // Determine animation direction based on timer position in list&#10;        var slideDown = ShouldSlideDown(_previousTimerName, newTimerName);&#10;&#10;        // Create slide out animation with opacity to hide content changes&#10;        var slideOutAnimation = new DoubleAnimation&#10;        {&#10;            From = 0,&#10;            To = slideDown ? -ActualHeight : ActualHeight,&#10;            Duration = TimeSpan.FromMilliseconds(200),&#10;            EasingFunction = new QuadraticEase { EasingMode = EasingMode.EaseIn }&#10;        };&#10;&#10;        // Also fade out during slide to hide any content flicker&#10;        var fadeOutAnimation = new DoubleAnimation&#10;        {&#10;            From = 1.0,&#10;            To = 0.3,&#10;            Duration = TimeSpan.FromMilliseconds(200),&#10;            EasingFunction = new QuadraticEase { EasingMode = EasingMode.EaseIn }&#10;        };&#10;&#10;        slideOutAnimation.Completed += (s, e) =&gt;&#10;        {&#10;            // Reset position to opposite side&#10;            ContentTransform.Y = slideDown ? ActualHeight : -ActualHeight;&#10;&#10;            // Update the timer name so data binding reflects new content&#10;            _previousTimerName = newTimerName;&#10;&#10;            // Slide in from opposite side&#10;            var slideInAnimation = new DoubleAnimation&#10;            {&#10;                From = slideDown ? ActualHeight : -ActualHeight,&#10;                To = 0,&#10;                Duration = TimeSpan.FromMilliseconds(200),&#10;                EasingFunction = new QuadraticEase { EasingMode = EasingMode.EaseOut }&#10;            };&#10;&#10;            // Fade back in during slide&#10;            var fadeInAnimation = new DoubleAnimation&#10;            {&#10;                From = 0.3,&#10;                To = 1.0,&#10;                Duration = TimeSpan.FromMilliseconds(200),&#10;                EasingFunction = new QuadraticEase { EasingMode = EasingMode.EaseOut }&#10;            };&#10;&#10;            ContentTransform.BeginAnimation(TranslateTransform.YProperty, slideInAnimation);&#10;            BeginAnimation(OpacityProperty, fadeInAnimation);&#10;        };&#10;&#10;        // Start slide out animation with fade&#10;        ContentTransform.BeginAnimation(TranslateTransform.YProperty, slideOutAnimation);&#10;        BeginAnimation(OpacityProperty, fadeOutAnimation);&#10;    }&#10;&#10;    private bool ShouldSlideDown(string fromTimerName, string toTimerName)&#10;    {&#10;        if (_viewModel == null) return true;&#10;&#10;        // Find positions of both timers in the list&#10;        var fromIndex = -1;&#10;        var toIndex = -1;&#10;&#10;        for (var i = 0; i &lt; _viewModel.Timers.Count; i++)&#10;        {&#10;            if (_viewModel.Timers[i].Name == fromTimerName)&#10;                fromIndex = i;&#10;            if (_viewModel.Timers[i].Name == toTimerName)&#10;                toIndex = i;&#10;        }&#10;&#10;        // If we can't find both timers, default to slide down&#10;        if (fromIndex == -1 || toIndex == -1)&#10;            return true;&#10;&#10;        // If moving to a timer higher in the list (lower index), slide up&#10;        // If moving to a timer lower in the list (higher index), slide down&#10;        return toIndex &gt; fromIndex;&#10;    }&#10;&#10;    private void UpdateDeleteButtonVisibility()&#10;    {&#10;        // Show delete button only when a timer is selected&#10;        if (_viewModel?.SelectedTimer != null &amp;&amp; _viewModel.MainTimerName != &quot;Wählen Sie einen Timer aus&quot;)&#10;            DeleteButton.Visibility = Visibility.Visible;&#10;        else&#10;            DeleteButton.Visibility = Visibility.Collapsed;&#10;    }&#10;&#10;    private void UpdateStartTimeDisplay()&#10;    {&#10;        if (_viewModel?.SelectedTimer?.LastStartTime != null)&#10;        {&#10;            var lastStartTime = _viewModel.SelectedTimer.LastStartTime.Value;&#10;            StartDateTime.Text = lastStartTime.ToString(&quot;dd.MM.yyyy HH:mm:ss&quot;);&#10;        }&#10;        else if (_viewModel?.SelectedTimer != null)&#10;        {&#10;            StartDateTime.Text = &quot;Noch nicht gestartet&quot;;&#10;        }&#10;        else&#10;        {&#10;            // No timer selected at all&#10;            StartDateTime.Text = &quot;&quot;;&#10;        }&#10;&#10;        StartDateTime.Visibility = Visibility.Visible;&#10;    }&#10;&#10;    private void DeleteButton_Click(object sender, RoutedEventArgs e)&#10;    {&#10;        if (_viewModel?.SelectedTimer != null) ShowDeleteHoverMenu(DeleteButton, _viewModel.SelectedTimer);&#10;    }&#10;&#10;    private void ShowDeleteHoverMenu(Button deleteButton, TimerViewModel timer)&#10;    {&#10;        // Create popup for hover menu&#10;        var popup = new Popup&#10;        {&#10;            PlacementTarget = deleteButton,&#10;            Placement = PlacementMode.Top,&#10;            AllowsTransparency = true,&#10;            StaysOpen = false&#10;        };&#10;&#10;        // Create menu content&#10;        var menuBorder = new Border&#10;        {&#10;            Background = (Brush)Application.Current.FindResource(&quot;SurfaceBrush&quot;),&#10;            BorderBrush = (Brush)Application.Current.FindResource(&quot;BorderBrush&quot;),&#10;            BorderThickness = new Thickness(1),&#10;            CornerRadius = new CornerRadius(4),&#10;            Margin = new Thickness(0, 0, 0, 2)&#10;        };&#10;&#10;        var menuStack = new StackPanel&#10;        {&#10;            Orientation = Orientation.Vertical,&#10;            Margin = new Thickness(8)&#10;        };&#10;&#10;        // Confirmation text&#10;        var confirmText = new TextBlock&#10;        {&#10;            Text = $&quot;Timer \&quot;{timer.Name}\&quot; löschen?&quot;,&#10;            FontSize = 12,&#10;            Foreground = (Brush)Application.Current.FindResource(&quot;PrimaryTextBrush&quot;),&#10;            Margin = new Thickness(0, 0, 0, 8),&#10;            TextWrapping = TextWrapping.Wrap,&#10;            MaxWidth = 200&#10;        };&#10;&#10;        // Button container&#10;        var buttonStack = new StackPanel&#10;        {&#10;            Orientation = Orientation.Horizontal,&#10;            HorizontalAlignment = HorizontalAlignment.Right&#10;        };&#10;&#10;        // Delete button&#10;        var deleteBtn = new Button&#10;        {&#10;            Content = &quot;Löschen&quot;,&#10;            Width = 60,&#10;            Height = 24,&#10;            FontSize = 11,&#10;            Background = new SolidColorBrush(Color.FromRgb(220, 53, 69)), // Red&#10;            Foreground = Brushes.White,&#10;            BorderThickness = new Thickness(0),&#10;            Margin = new Thickness(0, 0, 4, 0)&#10;        };&#10;&#10;        // Cancel button&#10;        var cancelBtn = new Button&#10;        {&#10;            Content = &quot;Abbrechen&quot;,&#10;            Width = 60,&#10;            Height = 24,&#10;            FontSize = 11,&#10;            Background = (Brush)Application.Current.FindResource(&quot;SurfaceBrush&quot;),&#10;            Foreground = (Brush)Application.Current.FindResource(&quot;PrimaryTextBrush&quot;),&#10;            BorderBrush = (Brush)Application.Current.FindResource(&quot;BorderBrush&quot;),&#10;            BorderThickness = new Thickness(1)&#10;        };&#10;&#10;        // Event handlers&#10;        deleteBtn.Click += (s, e) =&gt;&#10;        {&#10;            timer.RemoveCommand.Execute(null);&#10;            popup.IsOpen = false;&#10;        };&#10;&#10;        cancelBtn.Click += (s, e) =&gt; { popup.IsOpen = false; };&#10;&#10;        // Assemble menu&#10;        buttonStack.Children.Add(deleteBtn);&#10;        buttonStack.Children.Add(cancelBtn);&#10;        menuStack.Children.Add(confirmText);&#10;        menuStack.Children.Add(buttonStack);&#10;        menuBorder.Child = menuStack;&#10;        popup.Child = menuBorder;&#10;&#10;        // Show popup&#10;        popup.IsOpen = true;&#10;    }&#10;}" />
              <option name="updatedContent" value="using System.Windows;&#10;using System.Windows.Controls;&#10;using System.Windows.Controls.Primitives;&#10;using System.Windows.Data;&#10;using System.Windows.Media;&#10;using System.Windows.Media.Animation;&#10;using TicketTracker.ViewModels;&#10;&#10;namespace TicketTracker.Views;&#10;&#10;public partial class StopwatchView : UserControl&#10;{&#10;    private string? _previousTimerName;&#10;    private MainWindowViewModel? _viewModel;&#10;&#10;    public StopwatchView()&#10;    {&#10;        InitializeComponent();&#10;    }&#10;&#10;    public void SetViewModel(MainWindowViewModel viewModel)&#10;    {&#10;        _viewModel = viewModel;&#10;        DataContext = viewModel;&#10;&#10;        // Initialize _previousTimerName with the empty state&#10;        _previousTimerName = &quot;Wählen Sie einen Timer aus&quot;;&#10;&#10;        // Timer Display binden&#10;        TimerDisplay.SetBinding(TextBlock.TextProperty,&#10;            new Binding(&quot;MainTimerDisplay&quot;));&#10;&#10;        // Update start time display when timer changes&#10;        UpdateStartTimeDisplay();&#10;&#10;        // Button Commands binden&#10;        StartPauseButton.SetBinding(Button.CommandProperty,&#10;            new Binding(&quot;StartPauseCommand&quot;));&#10;        ResetButton.SetBinding(Button.CommandProperty,&#10;            new Binding(&quot;ResetCommand&quot;));&#10;&#10;        // Setup Delete button visibility&#10;        UpdateDeleteButtonVisibility();&#10;&#10;        // Button text updates and timer selection animation&#10;        viewModel.PropertyChanged += (s, e) =&gt;&#10;        {&#10;            if (e.PropertyName == nameof(viewModel.StartPauseButtonText))&#10;            {&#10;                UpdateStartPauseButton(viewModel.StartPauseButtonText);&#10;                UpdateStartTimeDisplay();&#10;            }&#10;            else if (e.PropertyName == nameof(viewModel.MainTimerName))&#10;            {&#10;                AnimateTimerChange(viewModel.MainTimerName);&#10;                UpdateDeleteButtonVisibility();&#10;                UpdateStartTimeDisplay();&#10;            }&#10;        };&#10;&#10;        UpdateStartPauseButton(viewModel.StartPauseButtonText);&#10;        _previousTimerName = viewModel.MainTimerName;&#10;    }&#10;&#10;&#10;    private void UpdateStartPauseButton(string text)&#10;    {&#10;        if (text == &quot;Start&quot;)&#10;        {&#10;            StartPauseIcon.Text = &quot;▶️&quot;;&#10;            StartPauseText.Text = &quot;Start&quot;;&#10;        }&#10;        else&#10;        {&#10;            StartPauseIcon.Text = &quot;⏸️&quot;;&#10;            StartPauseText.Text = &quot;Pause&quot;;&#10;        }&#10;    }&#10;&#10;    private void AnimateTimerChange(string newTimerName)&#10;    {&#10;        // Skip animation for initial load or when going to empty state&#10;        if (_previousTimerName == null || _previousTimerName == newTimerName ||&#10;            newTimerName == &quot;Wählen Sie einen Timer aus&quot;)&#10;        {&#10;            _previousTimerName = newTimerName;&#10;            return;&#10;        }&#10;&#10;        // When switching FROM empty state to first timer, use smooth fade-in like settings page&#10;        if (_previousTimerName == &quot;Wählen Sie einen Timer aus&quot;)&#10;        {&#10;            _previousTimerName = newTimerName;&#10;&#10;            // Smooth fade-in animation like settings page&#10;            var fadeInAnimation = new DoubleAnimation&#10;            {&#10;                From = 0.0,&#10;                To = 1.0,&#10;                Duration = TimeSpan.FromMilliseconds(150),&#10;                EasingFunction = new QuadraticEase { EasingMode = EasingMode.EaseOut }&#10;            };&#10;&#10;            BeginAnimation(OpacityProperty, fadeInAnimation);&#10;            return;&#10;        }&#10;&#10;        // Determine animation direction based on timer position in list&#10;        var slideDown = ShouldSlideDown(_previousTimerName, newTimerName);&#10;&#10;        // Create slide out animation with opacity to hide content changes&#10;        var slideOutAnimation = new DoubleAnimation&#10;        {&#10;            From = 0,&#10;            To = slideDown ? -ActualHeight : ActualHeight,&#10;            Duration = TimeSpan.FromMilliseconds(200),&#10;            EasingFunction = new QuadraticEase { EasingMode = EasingMode.EaseIn }&#10;        };&#10;&#10;        // Also fade out during slide to hide any content flicker&#10;        var fadeOutAnimation = new DoubleAnimation&#10;        {&#10;            From = 1.0,&#10;            To = 0.3,&#10;            Duration = TimeSpan.FromMilliseconds(200),&#10;            EasingFunction = new QuadraticEase { EasingMode = EasingMode.EaseIn }&#10;        };&#10;&#10;        slideOutAnimation.Completed += (s, e) =&gt;&#10;        {&#10;            // Reset position to opposite side&#10;            ContentTransform.Y = slideDown ? ActualHeight : -ActualHeight;&#10;&#10;            // Update the timer name so data binding reflects new content&#10;            _previousTimerName = newTimerName;&#10;&#10;            // Slide in from opposite side&#10;            var slideInAnimation = new DoubleAnimation&#10;            {&#10;                From = slideDown ? ActualHeight : -ActualHeight,&#10;                To = 0,&#10;                Duration = TimeSpan.FromMilliseconds(200),&#10;                EasingFunction = new QuadraticEase { EasingMode = EasingMode.EaseOut }&#10;            };&#10;&#10;            // Fade back in during slide&#10;            var fadeInAnimation = new DoubleAnimation&#10;            {&#10;                From = 0.3,&#10;                To = 1.0,&#10;                Duration = TimeSpan.FromMilliseconds(200),&#10;                EasingFunction = new QuadraticEase { EasingMode = EasingMode.EaseOut }&#10;            };&#10;&#10;            ContentTransform.BeginAnimation(TranslateTransform.YProperty, slideInAnimation);&#10;            BeginAnimation(OpacityProperty, fadeInAnimation);&#10;        };&#10;&#10;        // Start slide out animation with fade&#10;        ContentTransform.BeginAnimation(TranslateTransform.YProperty, slideOutAnimation);&#10;        BeginAnimation(OpacityProperty, fadeOutAnimation);&#10;    }&#10;&#10;    private bool ShouldSlideDown(string fromTimerName, string toTimerName)&#10;    {&#10;        if (_viewModel == null) return true;&#10;&#10;        // Find positions of both timers in the list&#10;        var fromIndex = -1;&#10;        var toIndex = -1;&#10;&#10;        for (var i = 0; i &lt; _viewModel.Timers.Count; i++)&#10;        {&#10;            if (_viewModel.Timers[i].Name == fromTimerName)&#10;                fromIndex = i;&#10;            if (_viewModel.Timers[i].Name == toTimerName)&#10;                toIndex = i;&#10;        }&#10;&#10;        // If we can't find both timers, default to slide down&#10;        if (fromIndex == -1 || toIndex == -1)&#10;            return true;&#10;&#10;        // If moving to a timer higher in the list (lower index), slide up&#10;        // If moving to a timer lower in the list (higher index), slide down&#10;        return toIndex &gt; fromIndex;&#10;    }&#10;&#10;    private void UpdateDeleteButtonVisibility()&#10;    {&#10;        // Show delete button only when a timer is selected&#10;        if (_viewModel?.SelectedTimer != null &amp;&amp; _viewModel.MainTimerName != &quot;Wählen Sie einen Timer aus&quot;)&#10;            DeleteButton.Visibility = Visibility.Visible;&#10;        else&#10;            DeleteButton.Visibility = Visibility.Collapsed;&#10;    }&#10;&#10;    private void UpdateStartTimeDisplay()&#10;    {&#10;        if (_viewModel?.SelectedTimer?.LastStartTime != null)&#10;        {&#10;            var lastStartTime = _viewModel.SelectedTimer.LastStartTime.Value;&#10;            StartDateTime.Text = lastStartTime.ToString(&quot;dd.MM.yyyy HH:mm:ss&quot;);&#10;        }&#10;        else if (_viewModel?.SelectedTimer != null)&#10;        {&#10;            StartDateTime.Text = &quot;Noch nicht gestartet&quot;;&#10;        }&#10;        else&#10;        {&#10;            // No timer selected at all&#10;            StartDateTime.Text = &quot;&quot;;&#10;        }&#10;&#10;        StartDateTime.Visibility = Visibility.Visible;&#10;    }&#10;&#10;    private void DeleteButton_Click(object sender, RoutedEventArgs e)&#10;    {&#10;        if (_viewModel?.SelectedTimer != null) ShowDeleteHoverMenu(DeleteButton, _viewModel.SelectedTimer);&#10;    }&#10;&#10;    private void ShowDeleteHoverMenu(Button deleteButton, TimerViewModel timer)&#10;    {&#10;        // Create popup for hover menu&#10;        var popup = new Popup&#10;        {&#10;            PlacementTarget = deleteButton,&#10;            Placement = PlacementMode.Top,&#10;            AllowsTransparency = true,&#10;            StaysOpen = false&#10;        };&#10;&#10;        // Create menu content&#10;        var menuBorder = new Border&#10;        {&#10;            Background = (Brush)Application.Current.FindResource(&quot;SurfaceBrush&quot;),&#10;            BorderBrush = (Brush)Application.Current.FindResource(&quot;BorderBrush&quot;),&#10;            BorderThickness = new Thickness(1),&#10;            CornerRadius = new CornerRadius(4),&#10;            Margin = new Thickness(0, 0, 0, 2)&#10;        };&#10;&#10;        var menuStack = new StackPanel&#10;        {&#10;            Orientation = Orientation.Vertical,&#10;            Margin = new Thickness(8)&#10;        };&#10;&#10;        // Confirmation text&#10;        var confirmText = new TextBlock&#10;        {&#10;            Text = $&quot;Timer \&quot;{timer.Name}\&quot; löschen?&quot;,&#10;            FontSize = 12,&#10;            Foreground = (Brush)Application.Current.FindResource(&quot;PrimaryTextBrush&quot;),&#10;            Margin = new Thickness(0, 0, 0, 8),&#10;            TextWrapping = TextWrapping.Wrap,&#10;            MaxWidth = 200&#10;        };&#10;&#10;        // Button container&#10;        var buttonStack = new StackPanel&#10;        {&#10;            Orientation = Orientation.Horizontal,&#10;            HorizontalAlignment = HorizontalAlignment.Right&#10;        };&#10;&#10;        // Delete button&#10;        var deleteBtn = new Button&#10;        {&#10;            Content = &quot;Löschen&quot;,&#10;            Width = 60,&#10;            Height = 24,&#10;            FontSize = 11,&#10;            Background = new SolidColorBrush(Color.FromRgb(220, 53, 69)), // Red&#10;            Foreground = Brushes.White,&#10;            BorderThickness = new Thickness(0),&#10;            Margin = new Thickness(0, 0, 4, 0)&#10;        };&#10;&#10;        // Cancel button&#10;        var cancelBtn = new Button&#10;        {&#10;            Content = &quot;Abbrechen&quot;,&#10;            Width = 60,&#10;            Height = 24,&#10;            FontSize = 11,&#10;            Background = (Brush)Application.Current.FindResource(&quot;SurfaceBrush&quot;),&#10;            Foreground = (Brush)Application.Current.FindResource(&quot;PrimaryTextBrush&quot;),&#10;            BorderBrush = (Brush)Application.Current.FindResource(&quot;BorderBrush&quot;),&#10;            BorderThickness = new Thickness(1)&#10;        };&#10;&#10;        // Event handlers&#10;        deleteBtn.Click += (s, e) =&gt;&#10;        {&#10;            timer.RemoveCommand.Execute(null);&#10;            popup.IsOpen = false;&#10;        };&#10;&#10;        cancelBtn.Click += (s, e) =&gt; { popup.IsOpen = false; };&#10;&#10;        // Assemble menu&#10;        buttonStack.Children.Add(deleteBtn);&#10;        buttonStack.Children.Add(cancelBtn);&#10;        menuStack.Children.Add(confirmText);&#10;        menuStack.Children.Add(buttonStack);&#10;        menuBorder.Child = menuStack;&#10;        popup.Child = menuBorder;&#10;&#10;        // Show popup&#10;        popup.IsOpen = true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>