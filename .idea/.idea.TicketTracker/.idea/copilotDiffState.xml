<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/TicketTracker/ViewModels/TimerViewModel.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/TicketTracker/ViewModels/TimerViewModel.cs" />
              <option name="originalContent" value="using System.Windows.Input;&#10;using TicketTracker.Commands;&#10;using TicketTracker.Models;&#10;using TicketTracker.Services;&#10;&#10;namespace TicketTracker.ViewModels;&#10;&#10;public class TimerViewModel : BaseViewModel&#10;{&#10;    private readonly Action&lt;TimerViewModel&gt;? _onRemove;&#10;    private readonly TimerModel _timer;&#10;    private readonly TimerService _timerService;&#10;    private string _displayTime = &quot;00:00:00.0&quot;;&#10;    private bool _isSelected;&#10;&#10;    public TimerViewModel(TimerModel timer, TimerService timerService, Action&lt;TimerViewModel&gt;? onRemove = null)&#10;    {&#10;        _timer = timer;&#10;        _timerService = timerService;&#10;        _onRemove = onRemove;&#10;&#10;        StartCommand = new RelayCommand(StartCommand_Execute, () =&gt; !_timer.IsRunning);&#10;        PauseCommand = new RelayCommand(Pause, () =&gt; _timer.IsRunning);&#10;        ResetCommand = new RelayCommand(Reset);&#10;        RemoveCommand = new RelayCommand(Remove);&#10;&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    public string Id =&gt; _timer.Id;&#10;    public string Name =&gt; _timer.Name;&#10;    public bool IsRunning =&gt; _timer.IsRunning;&#10;    public TimeSpan ElapsedTime =&gt; _timer.GetCurrentElapsedTime();&#10;    public DateTime? StartTime =&gt; _timer.StartTime;&#10;    public DateTime? LastStartTime =&gt; _timer.LastStartTime;&#10;&#10;    public string DisplayTime&#10;    {&#10;        get =&gt; _displayTime;&#10;        private set =&gt; SetProperty(ref _displayTime, value);&#10;    }&#10;&#10;    public bool IsSelected&#10;    {&#10;        get =&gt; _isSelected;&#10;        set =&gt; SetProperty(ref _isSelected, value);&#10;    }&#10;&#10;    public ICommand StartCommand { get; }&#10;    public ICommand PauseCommand { get; }&#10;    public ICommand ResetCommand { get; }&#10;    public ICommand RemoveCommand { get; }&#10;&#10;    public void UpdateDisplayTime()&#10;    {&#10;        var elapsed = _timer.GetCurrentElapsedTime();&#10;        DisplayTime = FormatTime(elapsed);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    public void Start()&#10;    {&#10;        _timerService.StartTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    public void SetElapsedTime(TimeSpan elapsedTime)&#10;    {&#10;        _timer.ElapsedTime = elapsedTime;&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    public void SetStartTime(DateTime? startTime)&#10;    {&#10;        _timer.StartTime = startTime;&#10;        OnPropertyChanged(nameof(StartTime));&#10;    }&#10;&#10;    public void SetLastStartTime(DateTime? lastStartTime)&#10;    {&#10;        _timer.LastStartTime = lastStartTime;&#10;        OnPropertyChanged(nameof(LastStartTime));&#10;    }&#10;&#10;    private void StartCommand_Execute()&#10;    {&#10;        Start();&#10;    }&#10;&#10;    private void Pause()&#10;    {&#10;        _timerService.PauseTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    private void Reset()&#10;    {&#10;        _timerService.ResetTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    private void Remove()&#10;    {&#10;        _timerService.RemoveTimer(_timer);&#10;        _onRemove?.Invoke(this);&#10;    }&#10;&#10;    private static string FormatTime(TimeSpan timeSpan)&#10;    {&#10;        return $&quot;{(int)timeSpan.TotalHours:D2}:{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}&quot;;&#10;    }&#10;}" />
              <option name="updatedContent" value="using System.Windows.Input;&#10;using TicketTracker.Commands;&#10;using TicketTracker.Models;&#10;using TicketTracker.Services;&#10;&#10;namespace TicketTracker.ViewModels;&#10;&#10;public class TimerViewModel : BaseViewModel&#10;{&#10;    private readonly Action&lt;TimerViewModel&gt;? _onRemove;&#10;    private readonly TimerModel _timer;&#10;    private readonly TimerService _timerService;&#10;    private string _displayTime = &quot;00:00:00.0&quot;;&#10;    private bool _isSelected;&#10;&#10;    public TimerViewModel(TimerModel timer, TimerService timerService, Action&lt;TimerViewModel&gt;? onRemove = null)&#10;    {&#10;        _timer = timer;&#10;        _timerService = timerService;&#10;        _onRemove = onRemove;&#10;&#10;        StartCommand = new RelayCommand(StartCommand_Execute, () =&gt; !_timer.IsRunning);&#10;        PauseCommand = new RelayCommand(Pause, () =&gt; _timer.IsRunning);&#10;        ResetCommand = new RelayCommand(Reset);&#10;        RemoveCommand = new RelayCommand(Remove);&#10;        OpenTicketCommand = new RelayCommand(OpenTicketLink, () =&gt; !string.IsNullOrWhiteSpace(Name));&#10;&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    public string Id =&gt; _timer.Id;&#10;    public string Name =&gt; _timer.Name;&#10;    public bool IsRunning =&gt; _timer.IsRunning;&#10;    public TimeSpan ElapsedTime =&gt; _timer.GetCurrentElapsedTime();&#10;    public DateTime? StartTime =&gt; _timer.StartTime;&#10;    public DateTime? LastStartTime =&gt; _timer.LastStartTime;&#10;&#10;    public string DisplayTime&#10;    {&#10;        get =&gt; _displayTime;&#10;        private set =&gt; SetProperty(ref _displayTime, value);&#10;    }&#10;&#10;    public bool IsSelected&#10;    {&#10;        get =&gt; _isSelected;&#10;        set =&gt; SetProperty(ref _isSelected, value);&#10;    }&#10;&#10;    public ICommand StartCommand { get; }&#10;    public ICommand PauseCommand { get; }&#10;    public ICommand ResetCommand { get; }&#10;    public ICommand RemoveCommand { get; }&#10;    public ICommand OpenTicketCommand { get; }&#10;&#10;    public void UpdateDisplayTime()&#10;    {&#10;        var elapsed = _timer.GetCurrentElapsedTime();&#10;        DisplayTime = FormatTime(elapsed);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    public void Start()&#10;    {&#10;        _timerService.StartTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    public void SetElapsedTime(TimeSpan elapsedTime)&#10;    {&#10;        _timer.ElapsedTime = elapsedTime;&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    public void SetStartTime(DateTime? startTime)&#10;    {&#10;        _timer.StartTime = startTime;&#10;        OnPropertyChanged(nameof(StartTime));&#10;    }&#10;&#10;    public void SetLastStartTime(DateTime? lastStartTime)&#10;    {&#10;        _timer.LastStartTime = lastStartTime;&#10;        OnPropertyChanged(nameof(LastStartTime));&#10;    }&#10;&#10;    private void StartCommand_Execute()&#10;    {&#10;        Start();&#10;    }&#10;&#10;    private void Pause()&#10;    {&#10;        _timerService.PauseTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;    }&#10;&#10;    private void Reset()&#10;    {&#10;        _timerService.ResetTimer(_timer);&#10;        OnPropertyChanged(nameof(IsRunning));&#10;        UpdateDisplayTime();&#10;    }&#10;&#10;    private void Remove()&#10;    {&#10;        _timerService.RemoveTimer(_timer);&#10;        _onRemove?.Invoke(this);&#10;    }&#10;&#10;    private void OpenTicketLink()&#10;    {&#10;        if (!string.IsNullOrWhiteSpace(Name))&#10;        {&#10;            var url = $&quot;https://jtl-software.atlassian.net/browse/{Name}&quot;;&#10;            try&#10;            {&#10;                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo&#10;                {&#10;                    FileName = url,&#10;                    UseShellExecute = true&#10;                });&#10;            }&#10;            catch { /* Fehlerbehandlung falls gewünscht */ }&#10;        }&#10;    }&#10;&#10;    private static string FormatTime(TimeSpan timeSpan)&#10;    {&#10;        return $&quot;{(int)timeSpan.TotalHours:D2}:{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/TicketTracker/Views/StopwatchView.xaml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/TicketTracker/Views/StopwatchView.xaml" />
              <option name="originalContent" value="&lt;UserControl x:Class=&quot;TicketTracker.Views.StopwatchView&quot;&#10;             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&#10;             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&#10;             Background=&quot;{DynamicResource BackgroundBrush}&quot;&gt;&#10;&#10;    &lt;!-- Hauptbereich mit Timer-Anzeige --&gt;&#10;    &lt;Grid Margin=&quot;40&quot; x:Name=&quot;MainContentGrid&quot;&gt;&#10;        &lt;Grid.RenderTransform&gt;&#10;            &lt;TranslateTransform x:Name=&quot;ContentTransform&quot; X=&quot;0&quot; Y=&quot;0&quot; /&gt;&#10;        &lt;/Grid.RenderTransform&gt;&#10;        &lt;Grid.RowDefinitions&gt;&#10;            &lt;RowDefinition Height=&quot;Auto&quot; /&gt;&#10;            &lt;RowDefinition Height=&quot;*&quot; /&gt;&#10;            &lt;RowDefinition Height=&quot;60&quot; /&gt;&#10;        &lt;/Grid.RowDefinitions&gt;&#10;&#10;        &lt;!-- Timer Name and Start Time --&gt;&#10;        &lt;StackPanel Grid.Row=&quot;0&quot; HorizontalAlignment=&quot;Center&quot; Margin=&quot;0,40,0,30&quot;&gt;&#10;            &lt;!-- Timer Name (jetzt oben und größer) --&gt;&#10;            &lt;TextBlock x:Name=&quot;TimerName&quot;&#10;                       Text=&quot;Wählen Sie einen Timer aus&quot;&#10;                       FontSize=&quot;32&quot;&#10;                       FontWeight=&quot;SemiBold&quot;&#10;                       Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                       HorizontalAlignment=&quot;Center&quot; /&gt;&#10;&#10;            &lt;!-- Start Date/Time (klein und grau) --&gt;&#10;            &lt;TextBlock x:Name=&quot;StartDateTime&quot;&#10;                       Text=&quot;Noch nicht gestartet&quot;&#10;                       FontSize=&quot;12&quot;&#10;                       Foreground=&quot;Gray&quot;&#10;                       HorizontalAlignment=&quot;Center&quot;&#10;                       Margin=&quot;0,5,0,0&quot;&#10;                       Visibility=&quot;Visible&quot; /&gt;&#10;        &lt;/StackPanel&gt;&#10;&#10;        &lt;!-- Timer-Anzeige (jetzt in der Mitte und kleiner) --&gt;&#10;        &lt;Viewbox Grid.Row=&quot;1&quot; Stretch=&quot;Uniform&quot; MaxHeight=&quot;150&quot;&gt;&#10;            &lt;TextBlock x:Name=&quot;TimerDisplay&quot;&#10;                       Text=&quot;00:00:00&quot;&#10;                       FontFamily=&quot;Consolas&quot;&#10;                       FontWeight=&quot;Light&quot;&#10;                       FontSize=&quot;60&quot;&#10;                       Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                       HorizontalAlignment=&quot;Center&quot;&#10;                       VerticalAlignment=&quot;Center&quot; /&gt;&#10;        &lt;/Viewbox&gt;&#10;&#10;        &lt;!-- Steuerungsbuttons --&gt;&#10;        &lt;StackPanel Grid.Row=&quot;2&quot;&#10;                    Orientation=&quot;Horizontal&quot;&#10;                    HorizontalAlignment=&quot;Center&quot;&gt;&#10;            &lt;Button x:Name=&quot;StartPauseButton&quot;&#10;                    Width=&quot;100&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot; FontWeight=&quot;SemiBold&quot;&#10;                    Background=&quot;{DynamicResource AccentBrush}&quot;&#10;                    Foreground=&quot;White&quot;&#10;                    BorderThickness=&quot;0&quot;&#10;                    Margin=&quot;0,0,15,0&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                                &lt;Setter Property=&quot;TextElement.Foreground&quot; Value=&quot;{DynamicResource PrimaryTextBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock x:Name=&quot;StartPauseIcon&quot;&#10;                               Text=&quot;▶️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock x:Name=&quot;StartPauseText&quot;&#10;                               Text=&quot;Start&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;&#10;            &lt;Button x:Name=&quot;ResetButton&quot;&#10;                    Width=&quot;80&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot;&#10;                    Background=&quot;{DynamicResource SurfaceBrush}&quot;&#10;                    Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                    BorderThickness=&quot;1&quot;&#10;                    BorderBrush=&quot;{DynamicResource BorderBrush}&quot;&#10;                    Margin=&quot;0,0,15,0&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock Text=&quot;⏹️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock Text=&quot;Reset&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;&#10;            &lt;Button x:Name=&quot;DeleteButton&quot;&#10;                    Width=&quot;80&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot;&#10;                    Background=&quot;{DynamicResource SurfaceBrush}&quot;&#10;                    Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                    BorderThickness=&quot;1&quot;&#10;                    BorderBrush=&quot;{DynamicResource BorderBrush}&quot;&#10;                    Click=&quot;DeleteButton_Click&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock Text=&quot;️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock Text=&quot;Löschen&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;        &lt;/StackPanel&gt;&#10;    &lt;/Grid&gt;&#10;&lt;/UserControl&gt;" />
              <option name="updatedContent" value="&lt;UserControl x:Class=&quot;TicketTracker.Views.StopwatchView&quot;&#10;             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&#10;             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&#10;             Background=&quot;{DynamicResource BackgroundBrush}&quot;&gt;&#10;&#10;    &lt;!-- Hauptbereich mit Timer-Anzeige --&gt;&#10;    &lt;Grid Margin=&quot;40&quot; x:Name=&quot;MainContentGrid&quot;&gt;&#10;        &lt;Grid.RenderTransform&gt;&#10;            &lt;TranslateTransform x:Name=&quot;ContentTransform&quot; X=&quot;0&quot; Y=&quot;0&quot; /&gt;&#10;        &lt;/Grid.RenderTransform&gt;&#10;        &lt;Grid.RowDefinitions&gt;&#10;            &lt;RowDefinition Height=&quot;Auto&quot; /&gt;&#10;            &lt;RowDefinition Height=&quot;*&quot; /&gt;&#10;            &lt;RowDefinition Height=&quot;60&quot; /&gt;&#10;        &lt;/Grid.RowDefinitions&gt;&#10;&#10;        &lt;!-- Timer Name and Start Time --&gt;&#10;        &lt;StackPanel Grid.Row=&quot;0&quot; HorizontalAlignment=&quot;Center&quot; Margin=&quot;0,40,0,30&quot;&gt;&#10;            &lt;!-- Timer Name als klickbarer Link --&gt;&#10;            &lt;TextBlock FontSize=&quot;32&quot;&#10;                       FontWeight=&quot;SemiBold&quot;&#10;                       Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                       HorizontalAlignment=&quot;Center&quot;&gt;&#10;                &lt;Hyperlink Command=&quot;{Binding OpenTicketCommand}&quot;&gt;&#10;                    &lt;Run Text=&quot;{Binding Name}&quot; /&gt;&#10;                &lt;/Hyperlink&gt;&#10;            &lt;/TextBlock&gt;&#10;&#10;            &lt;!-- Start Date/Time (klein und grau) --&gt;&#10;            &lt;TextBlock x:Name=&quot;StartDateTime&quot;&#10;                       Text=&quot;Noch nicht gestartet&quot;&#10;                       FontSize=&quot;12&quot;&#10;                       Foreground=&quot;Gray&quot;&#10;                       HorizontalAlignment=&quot;Center&quot;&#10;                       Margin=&quot;0,5,0,0&quot;&#10;                       Visibility=&quot;Visible&quot; /&gt;&#10;        &lt;/StackPanel&gt;&#10;&#10;        &lt;!-- Timer-Anzeige (jetzt in der Mitte und kleiner) --&gt;&#10;        &lt;Viewbox Grid.Row=&quot;1&quot; Stretch=&quot;Uniform&quot; MaxHeight=&quot;150&quot;&gt;&#10;            &lt;TextBlock x:Name=&quot;TimerDisplay&quot;&#10;                       Text=&quot;00:00:00&quot;&#10;                       FontFamily=&quot;Consolas&quot;&#10;                       FontWeight=&quot;Light&quot;&#10;                       FontSize=&quot;60&quot;&#10;                       Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                       HorizontalAlignment=&quot;Center&quot;&#10;                       VerticalAlignment=&quot;Center&quot; /&gt;&#10;        &lt;/Viewbox&gt;&#10;&#10;        &lt;!-- Steuerungsbuttons --&gt;&#10;        &lt;StackPanel Grid.Row=&quot;2&quot;&#10;                    Orientation=&quot;Horizontal&quot;&#10;                    HorizontalAlignment=&quot;Center&quot;&gt;&#10;            &lt;Button x:Name=&quot;StartPauseButton&quot;&#10;                    Width=&quot;100&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot; FontWeight=&quot;SemiBold&quot;&#10;                    Background=&quot;{DynamicResource AccentBrush}&quot;&#10;                    Foreground=&quot;White&quot;&#10;                    BorderThickness=&quot;0&quot;&#10;                    Margin=&quot;0,0,15,0&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                                &lt;Setter Property=&quot;TextElement.Foreground&quot; Value=&quot;{DynamicResource PrimaryTextBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock x:Name=&quot;StartPauseIcon&quot;&#10;                               Text=&quot;▶️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock x:Name=&quot;StartPauseText&quot;&#10;                               Text=&quot;Start&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;&#10;            &lt;Button x:Name=&quot;ResetButton&quot;&#10;                    Width=&quot;80&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot;&#10;                    Background=&quot;{DynamicResource SurfaceBrush}&quot;&#10;                    Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                    BorderThickness=&quot;1&quot;&#10;                    BorderBrush=&quot;{DynamicResource BorderBrush}&quot;&#10;                    Margin=&quot;0,0,15,0&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock Text=&quot;⏹️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock Text=&quot;Reset&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;&#10;            &lt;Button x:Name=&quot;DeleteButton&quot;&#10;                    Width=&quot;80&quot; Height=&quot;40&quot;&#10;                    FontSize=&quot;14&quot;&#10;                    Background=&quot;{DynamicResource SurfaceBrush}&quot;&#10;                    Foreground=&quot;{DynamicResource PrimaryTextBrush}&quot;&#10;                    BorderThickness=&quot;1&quot;&#10;                    BorderBrush=&quot;{DynamicResource BorderBrush}&quot;&#10;                    Click=&quot;DeleteButton_Click&quot;&gt;&#10;                &lt;Button.Template&gt;&#10;                    &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;&#10;                        &lt;Border Background=&quot;{TemplateBinding Background}&quot;&#10;                                BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;&#10;                                BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;&gt;&#10;                            &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;&#10;                        &lt;/Border&gt;&#10;                        &lt;ControlTemplate.Triggers&gt;&#10;                            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;&#10;                                &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource NavigationHoverBrush}&quot; /&gt;&#10;                            &lt;/Trigger&gt;&#10;                        &lt;/ControlTemplate.Triggers&gt;&#10;                    &lt;/ControlTemplate&gt;&#10;                &lt;/Button.Template&gt;&#10;                &lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Center&quot;&gt;&#10;                    &lt;TextBlock Text=&quot;️&quot;&#10;                               FontSize=&quot;12&quot;&#10;                               Margin=&quot;0,0,5,0&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                    &lt;TextBlock Text=&quot;Löschen&quot;&#10;                               VerticalAlignment=&quot;Center&quot; /&gt;&#10;                &lt;/StackPanel&gt;&#10;            &lt;/Button&gt;&#10;        &lt;/StackPanel&gt;&#10;    &lt;/Grid&gt;&#10;&lt;/UserControl&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>